from datetime import datetime, timezone
import logging
import os
import tempfile
import markdown
from weasyprint import CSS, HTML

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def convert_markdown_to_pdf(markdown_content: str, topic: str, pdfpath: str) -> str:
    """Convert markdown content to PDF"""
    try:
        # Convert markdown to HTML
        html_content = markdown.markdown(
            markdown_content,
            extensions=['tables', 'fenced_code', 'toc']
        )
        
        # Add CSS styling
        css_content = CSS(string='''
            @page {
                margin: 2cm;
                @top-center {
                    content: "Deep Research Report";
                    font-family: Arial, sans-serif;
                    font-size: 12px;
                    color: #666;
                }
            }
            body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
            }
            h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
            h2 { color: #34495e; border-left: 4px solid #3498db; padding-left: 10px; }
            h3 { color: #555; }
            code {
                background-color: #f4f4f4;
                padding: 2px 4px;
                border-radius: 3px;
                font-family: monospace;
            }
            pre {
                background-color: #f8f8f8;
                padding: 10px;
                border-radius: 5px;
                overflow-wrap: break-word;
            }
            table {
                border-collapse: collapse;
                width: 100%;
                margin: 10px 0;
            }
            th, td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }
            th {
                background-color: #f2f2f2;
                font-weight: bold;
            }
            blockquote {
                border-left: 4px solid #ddd;
                margin: 0;
                padding-left: 20px;
                font-style: italic;
                color: #666;
            }
            a {
                color: #3498db;
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
        ''')
        
        # Create full HTML document
        full_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Deep Research: {topic}</title>
        </head>
        <body>
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2c3e50; border: none;">ðŸ”¬ Deep Research Report</h1>
                <p style="color: #7f8c8d; font-size: 14px;">Topic: {topic}</p>
                <p style="color: #7f8c8d; font-size: 12px;">Generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            </div>
            {html_content}
            <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; color: #999; font-size: 12px;">
                <p>Generated by Cecilia Bot - Deep Research System</p>
            </div>
        </body>
        </html>
        """
        
        # Convert to PDF
        HTML(string=full_html).write_pdf(pdfpath, stylesheets=[css_content])
        
        logger.info(f"PDF created: {pdfpath}")
        return pdfpath
        
    except Exception as e:
        logger.error(f"Error converting to PDF: {e}")
        raise

